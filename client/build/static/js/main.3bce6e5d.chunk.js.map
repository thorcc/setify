{"version":3,"sources":["components/Home/Home.module.css","components/Search/SearchField/SearchField.module.css","components/Search/Search.module.css","components/Concerts/Concert/Songs/Songs.module.css","components/UI/SpotifyLogin.module.css","components/Error/Error.module.css","components/Concerts/Concert/Concert.module.css","components/Search/SearchField/SearchField.js","components/Search/SearchResults/Result/Result.js","components/Search/SearchResults/SearchResults.js","components/Search/Search.js","components/Concerts/Concert/Songs/Song/Song.js","components/Concerts/Concert/Songs/Songs.js","components/UI/SpotifyLogin.js","components/Concerts/Concert/Concert.js","components/Concerts/Concerts.js","components/Home/Home.js","components/Error/Error.js","App.js","serviceWorker.js","index.js","components/Search/SearchResults/Result/Result.module.css"],"names":["module","exports","searchField","props","onSubmit","handleSubmit","className","classes","SearchField","type","name","placeholder","value","chosenArtist","onChange","handleSearchInput","result","flag","info","country","Flag","code","height","onClick","handleClick","id","Result","searchResults","searchResult","map","res","choose","key","search","results","showSearchResults","SearchResults","Search","artistSearch","song","songs","Songs","Song","authUrl","spotifyLogin","href","Spotify","text","Concert","useState","showSongs","setShowSongs","handleToggle","toggle","size","Toggle","classList","icons","length","push","NoSongs","Icons","loggedIn","createPlaylist","venue","date","year","SpotifyLogin","join","Date","city","concerts","artistConcerts","concert","home","Home","Login","error","errText","errType","Error","handleErrorOK","App","setSearchResult","artist","setArtist","setArtistSearch","artistId","setArtistId","setShowSearchResults","showConcerts","setShowConcerts","setArtistConcerts","showHome","setShowHome","showError","setShowError","errorType","setErrorType","spotifyToken","setSpotifyToken","setLoggedIn","useEffect","a","axios","get","data","console","getArtists","getConcerts","hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","access_token","Concerts","log","post","tracks","token","then","response","alert","catch","event","target","preventDefault","clickedArtist","mid","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3bce6e5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home_Home__Hrybx\",\"Login\":\"Home_Login__9adTl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchField\":\"SearchField_SearchField__3GL-5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Search\":\"Search_Search__2SQmI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Songs\":\"Songs_Songs__1uQkd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Spotify\":\"SpotifyLogin_Spotify__Hu5Hj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Error\":\"Error_Error__3f4kP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Concert\":\"Concert_Concert__3S2fQ\",\"Date\":\"Concert_Date__JOjI_\",\"Icons\":\"Concert_Icons__2IbeB\",\"Toggle\":\"Concert_Toggle__31rg6\",\"Spotify\":\"Concert_Spotify__33uqb\",\"NoSongs\":\"Concert_NoSongs__-IqGe\"};","import React from 'react';\nimport classes from './SearchField.module.css'\n\nconst searchField = (props) => (\n    <form onSubmit={props.handleSubmit}>\n        <input className={classes.SearchField} type=\"text\" name=\"artist\" placeholder=\"artist search\" value={props.chosenArtist} onChange={props.handleSearchInput} />\n    </form>\n);\n\nexport default searchField;","import React from 'react';\nimport classes from './Result.module.css';\nimport Flag from 'react-world-flags';\n\n\nconst result = (props) => {\n    const flag = props.info.country ? <Flag className={classes.Flag} code={props.info.country} height=\"16\" /> : null;\n    return(\n        <div onClick={() => props.handleClick(props.info.name, props.info.id)} className={classes.Result}>\n            {flag}\n            <p>{props.info.name}</p>\n        </div>\n)};\n\nexport default result;","import React from 'react';\nimport Result from './Result/Result';\n\n\nconst searchResults = (props) => (\n   <div>\n        {props.searchResult.map(res => <Result handleClick={props.handleClick} choose={props.choose} key={res.id} info={res}/>)}\n   </div>\n);\n\nexport default searchResults;","import React from 'react';\nimport SearchField from './SearchField/SearchField';\nimport SearchResults from './SearchResults/SearchResults';\nimport classes from './Search.module.css';\n\nconst search = (props) => {\n    const results = props.showSearchResults ? \n        <SearchResults choose={props.choose} handleClick={props.handleClick} searchResult={props.searchResult} /> \n        : null; \n    return(\n    <div className={classes.Search}>\n        <SearchField handleSubmit={props.handleSubmit} handleSearchInput={props.handleSearchInput} chosenArtist={props.artistSearch} />\n        {results}\n    </div>\n    )\n};\n\nexport default search;","import React from 'react';\n\nconst song = (props) => (\n    <li>{props.name}</li>\n);\n\nexport default song;","import React from 'react';\nimport Song from './Song/Song';\nimport classes from './Songs.module.css';\n\nconst songs = (props) => {\n    return(\n        <ol className={classes.Songs}>\n            {props.songs.map(song => <Song key={song} name={song} />)}\n        </ol>\n    )\n};\n\nexport default songs;","import React from 'react';\nimport classes from './SpotifyLogin.module.css';\nimport { FaSpotify } from \"react-icons/fa\";\n\nconst clientId = \"c241b1237423480285702256ed781af7\";\nconst redirectUri = \"https://setify.app\";\n//const redirectUri = \"https://setifyapp.herokuapp.com\";\n//const redirectUri = \"http://localhost:3000\";\nconst scope = \"playlist-modify-public\";\nconst authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&redirect_uri=${redirectUri}&response_type=token&scope=${scope}`\n\n\nconst spotifyLogin = (props) => (\n        <a href={authUrl} className={classes.Spotify}>\n            <p>{props.text}</p>\n            <FaSpotify />\n        </a>\n)\n\nexport default spotifyLogin;","import React, { useState } from 'react';\nimport Songs from './Songs/Songs';\nimport classes from './Concert.module.css';\nimport { IoIosAddCircleOutline, IoIosRemoveCircleOutline } from \"react-icons/io\";\nimport { FaSpotify } from \"react-icons/fa\";\nimport SpotifyLogin from '../../UI/SpotifyLogin';\n\nconst Concert = (props) => {\n    const [showSongs, setShowSongs] = useState(false);\n\n    const handleToggle = () => showSongs ? setShowSongs(false) : setShowSongs(true);\n\n    const toggle = showSongs ? \n        <IoIosRemoveCircleOutline size=\"3em\" onClick={handleToggle} className={classes.Toggle} /> : \n        <IoIosAddCircleOutline size=\"3em\" onClick={handleToggle} className={classes.Toggle} />;\n\n    const classList = [classes.Concert];\n    let icons = null;\n\n    if (props.info.songs.length === 0) {\n        classList.push(classes.NoSongs)\n    } else {\n        icons = <div className={classes.Icons}>\n                    {props.loggedIn ? \n                        <div onClick={() => props.createPlaylist(props.info.songs, props.info.venue, (props.info.date + \"-\" + props.info.year))} className={classes.Spotify}>\n                            <p>Create playlist</p>\n                            <FaSpotify />\n                        </div> : \n                        <SpotifyLogin className={classes.Spotify} text=\"Log in to create list\"/>\n                    }   \n                    {toggle}\n                </div>  \n    };\n\n    return (\n        <div className={classList.join(' ')}>\n            <div className={classes.Date}>\n                <p>{props.info.date}</p>\n                <p>{props.info.year}</p>\n            </div>\n            <div>\n                <p>{props.info.venue}</p>\n                <p>{props.info.city}</p>\n            </div>\n            {icons}\n            {showSongs ? <Songs songs={props.info.songs} /> : null}\n        </div>\n    );\n};\n\nexport default Concert;","import React from 'react';\nimport Concert from './Concert/Concert';\nimport classes from './Concerts.module.css';\n\nconst concerts = (props) => {\n    return(\n        <div className={classes.Concert}>\n            {props.artistConcerts.map(concert => <Concert key={concert.id} loggedIn={props.loggedIn} createPlaylist={props.createPlaylist} info={concert}/>)}\n        </div>\n)};\n\nexport default concerts;","import React from 'react';\nimport classes from './Home.module.css';\nimport SpotifyLogin from '../UI/SpotifyLogin';\n\n\nconst home = (props) => (\n    <div className={classes.Home}>\n        <h1>setify</h1>\n        <p>\n            Setify lets you create Spotify playlists from concert setlists.\n        </p>\n        <div className={classes.Login}>\n        {!props.loggedIn ?\n            <div>\n                <p>You have to log in to your spotify account to create playlists.</p>\n                <SpotifyLogin text=\"Spotify Login\"/>\n            </div>\n            : <div>\n                <p>You are logged in, search for an artist to create a playlist.</p>\n            </div>\n        }\n        </div>\n    </div>\n)\n\nexport default home;","import React from 'react';\nimport classes from './Error.module.css';\n\nconst error = (props) => {\n    let errText = '';\n    switch(props.errType){\n        case 'login':\n            errText = 'Error: Could not create playlist. You have to be logged in.';\n            break;\n        case 'getSetlist':\n            errText = 'Error: Could not fetch setlists.';\n            break;\n        case 'getArtist':\n            errText = 'Error: Could not fetch artists.';\n            break;\n        default:\n            errText = 'Something went wrong.';\n            break;\n    }\n\n    return (\n    <div className={classes.Error}>\n        <p>{errText}</p>\n        <button onClick={props.handleErrorOK}>OK</button>\n    </div>\n    )\n}\nexport default error;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport Search from './components/Search/Search';\nimport Concerts from './components/Concerts/Concerts';\nimport Home from './components/Home/Home';\nimport Error from './components/Error/Error';\n\n\n\nfunction App() {\n  const [searchResult, setSearchResult] = useState([]);\n  const [artist, setArtist] = useState(\"\");\n  const [artistSearch, setArtistSearch] = useState(\"\");\n  const [artistId, setArtistId] = useState(\"\");\n  const [showSearchResults, setShowSearchResults] = useState(false);\n  const [showConcerts, setShowConcerts] = useState(false);\n  const [artistConcerts, setArtistConcerts] = useState([]);\n  const [showHome, setShowHome] = useState(true);\n  const [showError, setShowError] = useState(false);\n  const [errorType, setErrorType] = useState('');\n\n  const [spotifyToken, setSpotifyToken] = useState({});\n  const [loggedIn, setLoggedIn] = useState(false);\n  \n  const handleSearchInput = (event) => {\n    setArtistSearch(event.target.value);\n  } \n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setArtist(artistSearch);\n    setShowHome(false);\n    setShowConcerts(false);\n  }\n\n  useEffect( () => {\n    const getArtists = async () => {\n      try{\n        const get = await axios.get(\"/.netlify/functions/server/api/brainz/\" + artist);\n        setSearchResult(get.data);\n        setShowSearchResults(true);\n      }\n      catch(err){\n        console.error(err);\n        setErrorType('getArtist');\n        setShowError(true);\n      }\n    }\n    getArtists();\n  },[artist])\n\n\n  const handleSearchResultClick = (clickedArtist, mid) => {\n    setShowSearchResults(false);\n    setShowConcerts(true);\n    setArtistSearch(clickedArtist);\n    setArtistId(mid);\n  }\n\n  useEffect( () => {\n    const getConcerts = async () => {\n      try {\n        const get = await axios.get(\"/.netlify/functions/server/api/setlists/\" + artistId);\n        setArtistConcerts(get.data);\n        setShowConcerts(true);\n      }\n      catch (err) {\n        console.error(err);\n        setErrorType('getSetlist');\n        setShowError(true);\n      }\n    }\n    getConcerts();\n  }, [artistId]);\n\n  useEffect(() => {\n    const hash = window.location.hash\n      .substring(1)\n      .split(\"&\")\n      .reduce(function (initial, item) {\n        if (item) {\n          var parts = item.split(\"=\");\n          initial[parts[0]] = decodeURIComponent(parts[1]);\n        }\n        return initial;\n      }, {});\n    window.location.hash = \"\";\n    setSpotifyToken(hash);\n  }, [])\n\n  useEffect(() => spotifyToken.access_token ? setLoggedIn(true) : setLoggedIn(false), [spotifyToken]);\n\n  const createPlaylist = (songs, venue, date) => {\n    console.log(songs);\n    axios.post('/.netlify/functions/server/api/create-playlist/', {\n      artist: artist,\n      tracks: songs,\n      token: spotifyToken.access_token,\n      name: artist + \" - \" + venue + \": \" + date\n    })\n      .then(function (response) {\n        console.log(response);\n        alert(\"Playlist created!\")\n      })\n      .catch(function (error) {\n        console.log(error);\n        alert(\"Something went wrong.\")\n      });\n  }\n\n  const handleErrorOK = () => setShowError(false);\n  const error = showError ? <Error handleErrorOK={handleErrorOK} errType={errorType} /> : null;\n\n  const concerts = showConcerts ? <Concerts loggedIn={loggedIn} createPlaylist={createPlaylist} artistConcerts={artistConcerts} /> : null;\n  const home = showHome ? <Home loggedIn={loggedIn} /> : null;\n  return (\n    <div className=\"App\">\n      <header>\n        <Search\n          showSearchResults={showSearchResults}\n          handleSearchInput={handleSearchInput}\n          handleSubmit={handleSubmit}\n          handleClick={handleSearchResultClick}\n          artistSearch={artistSearch}\n          searchResult={searchResult}\n        />\n      </header>\n      {home}\n      {concerts}\n      {error}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Result\":\"Result_Result__7to00\",\"Flag\":\"Result_Flag__7kg2B\"};"],"sourceRoot":""}